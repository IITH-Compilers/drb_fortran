    -polly-ast                                      - Polly - Generate an AST from the SCoP (isl)
    -polly-canonicalize                             - Polly - Run canonicalization passes
    -polly-cleanup                                  - Polly - Cleanup after code generation
    -polly-codegen                                  - Polly - Create LLVM-IR from SCoPs
    -polly-dce                                      - Polly - Remove dead iterations
    -polly-delicm                                   - Polly - DeLICM/DePRE
    -polly-dependences                              - Polly - Calculate dependences
    -polly-detect                                   - Polly - Detect static control parts (SCoPs)
    -polly-dump-module                              - Polly - Dump Module
    -polly-export-jscop                             - Polly - Export Scops as JSON (Writes a .jscop file for each Scop)
    -polly-flatten-schedule                         - Polly - Flatten schedule
    -polly-function-dependences                     - Polly - Calculate dependences for all the SCoPs of a function
    -polly-function-scops                           - Polly - Create polyhedral description of all Scops of a function
    -polly-import-jscop                             - Polly - Import Scops from JSON (Reads a .jscop file for each Scop)
    -polly-mse                                      - Polly - Maximal static expansion of SCoP
    -polly-opt-isl                                  - Polly - Optimize schedule of SCoP
    -polly-optree                                   - Polly - Forward operand tree
    -polly-prepare                                  - Polly - Prepare code for polly
    -polly-prune-unprofitable                       - Polly - Prune unprofitable SCoPs
    -polly-rewrite-byref-params                     - Polly - Rewrite by reference parameters
    -polly-scop-inliner                             - inline functions based on how much of the function is a scop.
    -polly-scops                                    - Polly - Create polyhedral description of Scops
    -polly-simplify                                 - Polly - Simplify
Configure the polly loop optimizer
  -polly                                            - Enable the polly optimizer (only at -O3)
  -polly-2nd-level-tiling                           - Enable a 2nd level loop of loop tiling
  -polly-ast-print-accesses                         - Print memory access functions
  -polly-context=<isl parameter set>                - Provide additional constraints on the context parameters
  -polly-dce-precise-steps=<int>                    - The number of precise steps between two approximating iterations. (A value of -1 schedules another approximation stage before the actual dead code elimination.
  -polly-delicm-max-ops=<int>                       - Maximum number of isl operations to invest for lifetime analysis; 0=no limit
  -polly-detect-full-functions                      - Allow the detection of full functions
  -polly-dump-after                                 - Dump module after Polly transformations into a file suffixed with "-after"
  -polly-dump-after-file=<string>                   - Dump module after Polly transformations to the given file
  -polly-dump-before                                - Dump module before Polly transformations into a file suffixed with "-before"
  -polly-dump-before-file=<string>                  - Dump module before Polly transformations to the given file
  -polly-enable-simplify                            - Simplify SCoP after optimizations
  -polly-ignore-func=<string>                       - Ignore functions that match a regex. Multiple regexes can be comma separated. Scop detection will ignore all functions that match ANY of the regexes provided.
  -polly-on-isl-error-abort                         - Abort if an isl error is encountered
  -polly-only-func=<string>                         - Only run on functions that match a regex. Multiple regexes can be comma separated. Scop detection will run on all functions that match ANY of the regexes provided.
  -polly-only-region=<identifier>                   - Only run on certain regions (The provided identifier must appear in the name of the region's entry block
  -polly-only-scop-detection                        - Only run scop detection, but no other optimizations
  -polly-optimized-scops                            - Polly - Dump polyhedral description of Scops optimized with the isl scheduling optimizer and the set of post-scheduling transformations is applied on the schedule tree
  -polly-parallel                                   - Generate thread parallel code (isl codegen only)
  -polly-parallel-force                             - Force generation of thread parallel code ignoring any cost model
  -polly-pattern-matching-based-opts                - Perform optimizations based on pattern matching
  -polly-process-unprofitable                       - Process scops that are unlikely to benefit from Polly optimizations.
  -polly-register-tiling                            - Enable register tiling
  -polly-report                                     - Print information about the activities of Polly
  -polly-show                                       - Highlight the code regions that will be optimized in a (CFG BBs and LLVM-IR instructions)
  -polly-show-only                                  - Highlight the code regions that will be optimized in a (CFG only BBs)
  -polly-stmt-granularity                           - Algorithm to use for splitting basic blocks into multiple statements
  -polly-target                                     - The hardware to target
  -polly-tiling                                     - Enable loop tiling
  -polly-vectorizer                                 - Select the vectorization strategy
    =polly                                          -   Polly internal vectorizer
